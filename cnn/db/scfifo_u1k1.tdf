--scfifo ADD_RAM_OUTPUT_REGISTER="OFF" ALMOST_EMPTY_VALUE=200 ALMOST_FULL_VALUE=250 DEVICE_FAMILY="Cyclone V" LPM_NUMWORDS=256 LPM_SHOWAHEAD="ON" LPM_WIDTH=32 LPM_WIDTHU=8 OPTIMIZE_FOR_SPEED=5 OVERFLOW_CHECKING="ON" RAM_BLOCK_TYPE="M10K" UNDERFLOW_CHECKING="ON" USE_EAB="ON" aclr almost_empty clock data empty q rdreq sclr(gnd) wrreq ACF_BLOCK_RAM_AND_MLAB_EQUIVALENT_PAUSED_READ_CAPABILITIES="CARE" CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 CYCLONEII_M4K_COMPATIBILITY="ON" INTENDED_DEVICE_FAMILY="Cyclone V" LOW_POWER_MODE="AUTO" lpm_hint="RAM_BLOCK_TYPE=M10K"
--VERSION_BEGIN 15.1 cbx_altdpram 2015:10:21:18:09:22:SJ cbx_altera_syncram 2015:10:21:18:09:22:SJ cbx_altera_syncram_nd_impl 2015:10:21:18:09:22:SJ cbx_altsyncram 2015:10:21:18:09:23:SJ cbx_cycloneii 2015:10:21:18:09:23:SJ cbx_fifo_common 2015:10:21:18:09:22:SJ cbx_lpm_add_sub 2015:10:21:18:09:23:SJ cbx_lpm_compare 2015:10:21:18:09:23:SJ cbx_lpm_counter 2015:10:21:18:09:23:SJ cbx_lpm_decode 2015:10:21:18:09:23:SJ cbx_lpm_mux 2015:10:21:18:09:23:SJ cbx_mgl 2015:10:21:18:12:49:SJ cbx_nadder 2015:10:21:18:09:23:SJ cbx_scfifo 2015:10:21:18:09:23:SJ cbx_stratix 2015:10:21:18:09:23:SJ cbx_stratixii 2015:10:21:18:09:23:SJ cbx_stratixiii 2015:10:21:18:09:23:SJ cbx_stratixv 2015:10:21:18:09:23:SJ cbx_util_mgl 2015:10:21:18:09:23:SJ  VERSION_END


-- Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus Prime License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.


FUNCTION a_dpfifo_ijc1 (aclr, clock, data[31..0], rreq, sclr, wreq)
RETURNS ( empty, q[31..0], usedw[7..0]);

--synthesis_resources = M10K 1 reg 17 
SUBDESIGN scfifo_u1k1
( 
	aclr	:	input;
	almost_empty	:	output;
	clock	:	input;
	data[31..0]	:	input;
	empty	:	output;
	q[31..0]	:	output;
	rdreq	:	input;
	sclr	:	input;
	wrreq	:	input;
) 
VARIABLE 
	dpfifo : a_dpfifo_ijc1;
	dffe_nae : dffe;
	comparison_ae0	: WIRE;
	comparison_ae1	: WIRE;
	comparison_ae2	: WIRE;
	comparison_ae3	: WIRE;
	comparison_ae4	: WIRE;
	comparison_ae5	: WIRE;
	comparison_ae6	: WIRE;
	comparison_ae7	: WIRE;
	comparison_pre_ae0	: WIRE;
	comparison_pre_ae1	: WIRE;
	comparison_pre_ae2	: WIRE;
	comparison_pre_ae3	: WIRE;
	comparison_pre_ae4	: WIRE;
	comparison_pre_ae5	: WIRE;
	comparison_pre_ae6	: WIRE;
	comparison_pre_ae7	: WIRE;
	const_node_sclr	: NODE;
	wire_ae[7..0]	: WIRE;
	wire_pre_ae[7..0]	: WIRE;

BEGIN 
	dpfifo.aclr = aclr;
	dpfifo.clock = clock;
	dpfifo.data[] = data[];
	dpfifo.rreq = rdreq;
	dpfifo.sclr = sclr;
	dpfifo.wreq = wrreq;
	dffe_nae.clk = clock;
	dffe_nae.clrn = (! aclr);
	dffe_nae.d = ((dffe_nae.q & (dffe_nae.q $ (sclr # ((comparison_ae7 & (! wrreq)) & rdreq)))) # ((! dffe_nae.q) & ((((! sclr) & comparison_pre_ae7) & wrreq) & (! rdreq))));
	almost_empty = (! dffe_nae.q);
	comparison_ae0 = (dpfifo.usedw[0..0] $ wire_ae[0..0]);
	comparison_ae1 = ((dpfifo.usedw[1..1] $ wire_ae[1..1]) & comparison_ae0);
	comparison_ae2 = ((dpfifo.usedw[2..2] $ wire_ae[2..2]) & comparison_ae1);
	comparison_ae3 = ((dpfifo.usedw[3..3] $ wire_ae[3..3]) & comparison_ae2);
	comparison_ae4 = ((dpfifo.usedw[4..4] $ wire_ae[4..4]) & comparison_ae3);
	comparison_ae5 = ((dpfifo.usedw[5..5] $ wire_ae[5..5]) & comparison_ae4);
	comparison_ae6 = ((dpfifo.usedw[6..6] $ wire_ae[6..6]) & comparison_ae5);
	comparison_ae7 = ((dpfifo.usedw[7..7] $ wire_ae[7..7]) & comparison_ae6);
	comparison_pre_ae0 = (dpfifo.usedw[0..0] $ wire_pre_ae[0..0]);
	comparison_pre_ae1 = ((dpfifo.usedw[1..1] $ wire_pre_ae[1..1]) & comparison_pre_ae0);
	comparison_pre_ae2 = ((dpfifo.usedw[2..2] $ wire_pre_ae[2..2]) & comparison_pre_ae1);
	comparison_pre_ae3 = ((dpfifo.usedw[3..3] $ wire_pre_ae[3..3]) & comparison_pre_ae2);
	comparison_pre_ae4 = ((dpfifo.usedw[4..4] $ wire_pre_ae[4..4]) & comparison_pre_ae3);
	comparison_pre_ae5 = ((dpfifo.usedw[5..5] $ wire_pre_ae[5..5]) & comparison_pre_ae4);
	comparison_pre_ae6 = ((dpfifo.usedw[6..6] $ wire_pre_ae[6..6]) & comparison_pre_ae5);
	comparison_pre_ae7 = ((dpfifo.usedw[7..7] $ wire_pre_ae[7..7]) & comparison_pre_ae6);
	empty = dpfifo.empty;
	q[] = dpfifo.q[];
	const_node_sclr = sclr;
	wire_ae[] = ( B"0", B"0", B"1", B"1", B"0", B"1", B"1", B"1");
	wire_pre_ae[] = ( B"0", B"0", B"1", B"1", B"1", B"0", B"0", B"0");
END;
--VALID FILE
