#!/usr/bin/perl -w
######################################################################## 
# Multiple RAM and ROM initialization
#
# Description
# 1. Generate BMM File according to xdl file
# 2. Initialize the BRAM using data2mem command 
# 
# Acknowledgement
# Stephen Douglas Craven from Configurable Computing Lab of Virginia Tech
# developed a script for his openfire project in Jan 17th 2006, and Cheng Liu
# extended it for his own CGRA based high level synthesis project in 2012.
#
# History
# 1/17/2006 -- Added support for variable MB names
# 6/27/2012 -- Added support for multiple independent RAM/ROM blocks
#
########################################################################

#
# Globals
#
use vars qw/ %opt /;
use Time::HiRes qw/time/;

#
# Command line options processing
#
sub init(){
    use Getopt::Std;
    my $opt_string = 'o:n:t:b:x:r:c:h';
    getopts( "$opt_string", \%opt ) or usage();
    usage() if ($opt{h});
}

#
# Message about this program and how to use it
#
sub usage()
{
    print STDERR << "EOF";

This program creates a BMM file from an NCD which can be used to 
write initial BRAM contents to a bitstream directly.

NOTE: XDL and DATA2MEM must be installed and in the user's path.

usage: $0 [-h] [-n NCD_FILE -o BMM_FILE] [-r ROM_FILE -b BITSTREAM]

 -h		      : this (help) message
 -n NCD file	      : NCD_FILE containing placed BRAMs (default = top.ncd)
 -o BMM file	      : BMM_FILE to create (default = top.bmm)
 -t top module        : name of the top-level module (default = top)
 -b bitstream         : bitstream to update with BRAM contents (default = top.bit)
 -x XDL file          : use specified XDL file (w/o flag, generates own from NCD_FILE)
 -r row number        : row numer of the cgra (default row=4)
 -c column number     : column number of the cgra (default column=4)

example: $0 -n top.ncd -o top.bmm -b top.bit
example: $0 -o top.bmm -t top

EOF
    exit;
}


#=---------------------------------------------------------------------
#=----Start of the program
#=---------------------------------------------------------------------

my $start_time=time();
init();

# Fill in Default Values
if($opt{t}) {
    $top_level_name = $opt{t};
} else {
    $top_level_name = "top";
}

if($opt{n}) {
    $ncd_file = $opt{n};
} else {
    $ncd_file = "top.ncd";
}

if($opt{o}) {
    $output_bmm = $opt{o};
} else {
    $output_bmm = "top.bmm";
}

if($opt{b}) {
    $bitstream = $opt{b};
} else {
    $bitstream = "top.bit";
}

if($opt{r}) {
    $row_num=$opt{r};
} else {
    $row_num=2;
}

if($opt{c}) {
    $col_num=$opt{c};
} else {
    $col_num=2;
}

# An XDL file is a textual representation of an NCD file
# An NCD file, after PAR< contains the physical locations of all components
# We need to know where PAR placed the OpenFire BRAMs, so we create and parse an XDL file
$xdl_file = $ncd_file;
$xdl_file =~ s/ncd/xdl/;

if($opt{x}){ # If an XDL file is specified, check if its there
    if(-r $opt{x}) {
        $xdl_file = $opt{x};
    } 
    else {
        print "ERROR! Specifiec XDL File $opt{x} cannot be read! Exiting \n";
        exit(0);
    }
} 
elsif (-r $xdl_file) { # if no XDL file given, search for default one
} 
else {	# can't find an XDL file, so create one
    system("xdl -ncd2xdl $ncd_file $xdl_file");
}

# DATA2MEM needs a BMM File to describe the memory layout and BRAM physical locations
# We will make a BMM file using information from the XDL file
open(inst_bmm_file, ">"."inst-"."$output_bmm");

# Create BMM file for inst memory. Note that each BRAM is 9*1024Bytes
$slb=0;  
$mlb=$row_num*$col_num*9*1024-1;
printf inst_bmm_file ("ADDRESS_SPACE PE"."_inst_mem RAMB36 [0x0000%X:0x000%X]\n", $slb, $mlb);
my $i=0;

# Loop for each PE
for($rcount = 0; $rcount < $row_num; $rcount++){
    for($ccount = 0; $ccount < $col_num; $ccount++){

        # Loop over each BRAM discovered above, even though we can find only one line.
        # We need the name of the BRAM and its location
        my $mem_name;
        my $loc_name;


        #========================================================
        #                 Instruction memory
        #========================================================
        # ramloop[1], and then ramloop[0], Note that instruction rom is 1k*72bit=1k*9Byte
        #$target_name = "base_system_i".'/'."cgra".$row_num."x".$col_num."_0".'/'."cgra".$row_num."x".$col_num."_0".'/'."PE".$rcount.$ccount.'/'."Inst_Mem".'/'."rom1024";
        $target_name = "base_system_i".'/'."cgra2x2_0".'/'."cgra2x2_0".'/'."torus2x2".'/'."PE".$rcount.$ccount.'/'."Inst_Mem".'/'."rom1024";
        $target_lines = `grep '^inst' $xdl_file | grep $target_name`; #make sure inst is the beginning of a line

        my $i=0;
        print  inst_bmm_file "    BUS_BLOCK\n";
        foreach $_ (split(/\n/, $target_lines)){
            if(/inst \"base_system([^"]+)\".*RAMB36_([\w\d]+)/) {
                $mem_name = $1;
                $loc_name = $2;
            }

            if($i==0){
                print  inst_bmm_file "    base_system"."$mem_name [35:0] PLACED = $loc_name;\n";
            }
            else{
                print  inst_bmm_file "    base_system"."$mem_name [71:36] PLACED = $loc_name;\n";
            }
            $i=$i+1;
        }
        print  inst_bmm_file "    END_BUS_BLOCK;\n";
        print  inst_bmm_file "\n";
    }
}
print  inst_bmm_file "END_ADDRESS_SPACE;\n";

close(inst_bmm_file);

$fName=$output_bmm;
$error = `data2mem -bm $fName`;
if($error)  {
    print "$error";
    print "Error in inst mem BMM File!  Sorry!\n";
}

# Updata instruction memory
`data2mem -bm $output_bmm -bd inst.mem -bt $bitstream -o b newtop.bit`;

# Verification of the updating
#`data2mem -bm inst_torus16.bmm  -bt newtop.bit -d > new_inst_dump.txt`;
#`data2mem -bm inst_torus16.bmm  -bt top.bit -d > old_inst_dump.txt`;
#`diff new_inst_dump.txt old_inst_dump.txt > inst_diff.txt`;

my $end_time=time();
print "Total bitstream update time is ".($end_time-$start_time)."s!\n";

