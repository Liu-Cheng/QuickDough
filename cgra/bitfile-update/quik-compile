#!/bin/bash

###########################################################
# Initial directories
###########################################################

DFG_Dir=/home/liucheng/gitrepo/project/benchmark
Scheduler_Dir=/home/liucheng/gitrepo/project/scheduler
Bitfile_Dir=/home/liucheng/gitrepo/project/cgra/bitfile-update
echo "SCGRA Compiler log files " > $Bitfile_Dir"/log.txt"

###########################################################
# Read and check input options
###########################################################

if [ ! $# -ge 8 ]; then
    echo "$0 [-n App_Name] [-t App_Type] [-r CGRA_Row] [-c CGRA_Column] [-p Blocking and Unrolling parameters]"
    exit 1
fi

if [ ! "$1" = "-n" ]; then
    echo "Unknown option $1"
    exit 1
fi
App_Name=$2

if [ ! "$3" = "-t" ]; then
    echo "Unknown option $3"
    exit 1
fi
Type=$4

if [ ! "$5" = "-r" ]; then
    echo "Unknown option $5"
    exit 1
fi
Row=$6

if [ ! "$7" = "-c" ]; then
    echo "Unknown option $7"
    exit 1
fi
Col=$8

if [ $# -gt 8 ]; then
    if [ ! "$9" = "-p" ]; then
        echo "Unknown option $9"
        exit 1
    fi
fi

CGRA_Size=$Row"x"$Col

###########################################################
# DFG Generator Configuration
###########################################################

cd $DFG_Dir"/"$App_Name
if [ "$App_Name" = "mm" ]; then
    if [ "$Type" = "supersmall" ]; then
        cd mm-fully-unroll/
        shift
        sed -i "/^\#define N/c\\#define N $9" config.h
    elif [ "$Type" = "small" ]; then
        cd mm-3rd-level-unroll/
        shift
        sed -i "/^\#define B/c\\#define B $9" config.h
        shift
        sed -i "/^\#define M/c\\#define M $9" config.h
        shift
        sed -i "/^\#define P/c\\#define P $9" config.h
        shift
        sed -i "/^\#define N/c\\#define N $9" config.h
    elif [ "$Type" = "medium" ]; then
        cd mm-2nd-level-unroll/
        shift
        sed -i "/^\#define B/c\\#define B $9" config.h
        shift
        sed -i "/^\#define M/c\\#define M $9" config.h
        shift
        sed -i "/^\#define N/c\\#define N $9" config.h
    else
        cd mm-1st-level-unroll/
        shift
        sed -i "/^\#define B/c\\#define B $9" config.h
        shift
        sed -i "/^\#define M/c\\#define M $9" config.h
    fi
elif [ "$App_Name" = "fir" ]; then
    if [ "$Type" = "small" ]; then
        cd fir-fully-unroll/
        shift
        sed -i "/^\#define L/c\\#define L $9" config.h
        shift
        sed -i "/^\#define N/c\\#define N $9" config.h
    else
        cd fir-2nd-level-unroll/
        shift
        sed -i "/^\#define B/c\\#define B $9" config.h
        shift
        sed -i "/^\#define L/c\\#define L $9" config.h
        shift
        sed -i "/^\#define N/c\\#define N $9" config.h
    fi
elif [ "$App_Name" = "sobel" ]; then
    if [ "$Type" = "small" ] && [ "$Row" = "5" ] && [ "$Col" = "5" ]; then
        cd sobel-fully-unroll/
        shift
        sed -i "/^\#define R/c\\#define R $9" config.h
        shift
        sed -i "/^\#define C/c\\#define C $9" config.h
    else
        cd sobel-4th-level-unroll/
        shift
        sed -i "/^\#define B/c\\#define B $9" config.h
        shift
        sed -i "/^\#define R/c\\#define R $9" config.h
        shift
        sed -i "/^\#define C/c\\#define C $9" config.h
    fi
elif [ "$App_Name" = "kmean" ]; then
    cd kmean-3rd-level-unroll/
    shift
        sed -i "/^\#define B/c\\#define B $9" config.h
    shift
        sed -i "/^\#define M/c\\#define M $9" config.h
    shift
        sed -i "/^\#define N/c\\#define N $9" config.h
    shift
        sed -i "/^\#define D/c\\#define D $9" config.h
fi

echo "Compile the DFG generator" >> $Bitfile_Dir"/log.txt"
make clean >> $Bitfile_Dir"/log.txt"
make >> $Bitfile_Dir"/log.txt"


###########################################################
# DFG Generation
###########################################################

echo "DFG generation starts..."
Start_Time=$(date +%s%N)
./dfg-gen >> $Bitfile_Dir"/log.txt"
End_Time=$(date +%s%N)
echo "DFG Genertion is done, time elapsed: $((($End_Time - $Start_Time)/1000000))""ms"
echo

###########################################################
# DFG Scheduling
###########################################################

echo "DFG Scheduling starts..."
Start_Time=$(date +%s%N)
cp -rf dump/*.* $Scheduler_Dir"/config/"

#Update configuration file
cd $Scheduler_Dir"/config/"
let Num=$Row*$Col 
sed -i "/^CGRA_Scale/c\CGRA_Scale $Num" configure.txt
sed -i "/^Row/c\Row $Row" configure.txt
sed -i "/^Col/c\Col $Col" configure.txt
sed -i "/^DFG_Name/c\DFG_Name $App_Name" configure.txt
cd ..
./cgracompiler
End_Time=$(date +%s%N)

echo "DFG scheduling completes, time elapsed $((($End_Time - $Start_Time)/1000000))""ms"
echo

###########################################################
# Bitstream Generation
###########################################################

echo "Bitstream generation starts..."
Start_Time=$(date +%s%N)
#Copy scheduling result as well as realted data to bitstream integration
cp -rf ./result/Inst.mem $Bitfile_Dir"/scgra"$CGRA_Size"-1k-"$App_Name"-"$Type"-inst.mem"
cp -rf ./config/IO.h $Bitfile_Dir"/dump"
cp -rf ./result/Addr-Buffer.mem $Bitfile_Dir"/scgra"$CGRA_Size"-1k-"$App_Name"-"$Type"-addr.mem"

#Bitfile integration
cd $Bitfile_Dir
NCDfile="scgra"$CGRA_Size"-1k.ncd"
XDLfile="scgra"$CGRA_Size"-1k.xdl"
EmptyBitfile="scgra"$CGRA_Size"-1k.bit"
Bitfile="scgra"$CGRA_Size"-1k-"$App_Name"-"$Type".bit"

Target="Inst" 
BMMfile="scgra${CGRA_Size}-1k-${App_Name}-${Type}-inst.bmm"
Memfile="scgra${CGRA_Size}-1k-${App_Name}-${Type}-inst.mem"
TmpBitfile="tmp.bit"
./inst1k-update -a $Target -n $NCDfile -o $BMMfile -b $EmptyBitfile -d $XDLfile -r $Row -c $Col -m $Memfile -e $TmpBitfile >> $Bitfile_Dir"/log.txt"

Target="Addr"
BMMfile="scgra"$CGRA_Size"-1k-"$App_Name"-"$Type"-addr.bmm"
Memfile="scgra"$CGRA_Size"-1k-"$App_Name"-"$Type"-addr.mem"
./inst1k-update -a $Target -n $NCDfile -o $BMMfile -b $TmpBitfile -d $XDLfile -r $Row -c $Col -m $Memfile -e $Bitfile >> $Bitfile_Dir"/log.txt"
rm $TmpBitfile

mv $Bitfile ./dump
End_Time=$(date +%s%N)
echo "Bitstream generation completes, time elapsed $((($End_Time - $Start_Time)/1000000))""ms"
echo
