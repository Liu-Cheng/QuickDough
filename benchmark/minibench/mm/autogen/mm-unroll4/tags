!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADDADD	common.h	/^    MULSUB, MULADD, ADDADD, ADDSUB, SUBADD, SUBSUB, PHI$/;"	e	enum:OPCODE
ADDSUB	common.h	/^    MULSUB, MULADD, ADDADD, ADDSUB, SUBADD, SUBSUB, PHI$/;"	e	enum:OPCODE
CC	Makefile	/^CC = g++$/;"	m
CFLAGS	Makefile	/^CFLAGS= -DDEBUG -g -Wall$/;"	m
IM	common.h	/^    INCONST, INVAR, UNUSED, OUTVAR, IM $/;"	e	enum:OPTYPE
INCONST	common.h	/^    INCONST, INVAR, UNUSED, OUTVAR, IM $/;"	e	enum:OPTYPE
INVAR	common.h	/^    INCONST, INVAR, UNUSED, OUTVAR, IM $/;"	e	enum:OPTYPE
Instruction	Instruction.cpp	/^Instruction::Instruction(){$/;"	f	class:Instruction
Instruction	Instruction.h	/^struct Instruction{$/;"	s
MULADD	common.h	/^    MULSUB, MULADD, ADDADD, ADDSUB, SUBADD, SUBSUB, PHI$/;"	e	enum:OPCODE
MULSUB	common.h	/^    MULSUB, MULADD, ADDADD, ADDSUB, SUBADD, SUBSUB, PHI$/;"	e	enum:OPCODE
N	common.h	4;"	d
OBJS	Makefile	/^OBJS = $(SRCS:.cpp=.o)$/;"	m
OPCODE	common.h	/^enum OPCODE {$/;"	g
OPTYPE	common.h	/^enum OPTYPE {$/;"	g
OUTVAR	common.h	/^    INCONST, INVAR, UNUSED, OUTVAR, IM $/;"	e	enum:OPTYPE
Operand	Operand.cpp	/^Operand::Operand(){$/;"	f	class:Operand
Operand	Operand.h	/^struct Operand{$/;"	s
PHI	common.h	/^    MULSUB, MULADD, ADDADD, ADDSUB, SUBADD, SUBSUB, PHI$/;"	e	enum:OPCODE
SRCS	Makefile	/^SRCS = dfg-gen.cpp \\$/;"	m
SUBADD	common.h	/^    MULSUB, MULADD, ADDADD, ADDSUB, SUBADD, SUBSUB, PHI$/;"	e	enum:OPCODE
SUBSUB	common.h	/^    MULSUB, MULADD, ADDADD, ADDSUB, SUBADD, SUBSUB, PHI$/;"	e	enum:OPCODE
TARGET	Makefile	/^TARGET = dfg-gen$/;"	m
UNUSED	common.h	/^    INCONST, INVAR, UNUSED, OUTVAR, IM $/;"	e	enum:OPTYPE
__COMMON_H__	common.h	2;"	d
__INSTRUCTION_H__	Instruction.h	2;"	d
__OPERAND_H__	Operand.h	2;"	d
bram0_addr	dfg-gen.cpp	/^int bram0_addr=0;$/;"	v
bram1_addr	dfg-gen.cpp	/^int bram1_addr=0;$/;"	v
data_to_id	dfg-gen.cpp	/^int data_to_id(int const_val){$/;"	f
data_to_id	dfg-gen.cpp	/^int data_to_id(int idx, int idy, OPTYPE op_type){$/;"	f
dfg_compute	dfg-gen.cpp	/^void dfg_compute(std::vector<Operand*> &op_array, std::vector<Instruction*> &inst_array){$/;"	f
dfg_dump	dfg-gen.cpp	/^void dfg_dump(const std::string &dfg_name, const std::vector<Operand*> &op_array, const std::vector<Instruction*> &inst_array){$/;"	f
dst_op	Instruction.h	/^        int dst_op;$/;"	m	struct:Instruction
gl_id	Operand.cpp	/^int Operand::gl_id=0;$/;"	m	class:Operand	file:
gl_id	Operand.h	/^        static int gl_id;$/;"	m	struct:Operand
id_to_op	dfg-gen.cpp	/^std::map<int, Operand*> id_to_op;$/;"	v
inst_opcode	Instruction.h	/^        OPCODE inst_opcode;$/;"	m	struct:Instruction
io_init	dfg-gen.cpp	/^void io_init(int sub_in[2*N][N], int sub_out[N][N]){$/;"	f
kernel_to_dfg	dfg-gen.cpp	/^void kernel_to_dfg(std::vector<Operand*> &op_array, std::vector<Instruction*> &inst_array){$/;"	f
main	dfg-gen.cpp	/^int main(){$/;"	f
op_array_init	dfg-gen.cpp	/^void op_array_init(std::vector<Operand*> &op_array, int sub_in[2*N][N], int sub_out[N][N], int const_in[1]){$/;"	f
op_bram_addr	Operand.h	/^        int op_bram_addr;$/;"	m	struct:Operand
op_bram_id	Operand.h	/^        int op_bram_id;$/;"	m	struct:Operand
op_id	Operand.h	/^        int op_id;$/;"	m	struct:Operand
op_type	Operand.h	/^        OPTYPE op_type;$/;"	m	struct:Operand
op_value	Operand.h	/^        int op_value;$/;"	m	struct:Operand
self_increase	Operand.cpp	/^int Operand::self_increase(){$/;"	f	class:Operand
src_op0	Instruction.h	/^        int src_op0;$/;"	m	struct:Instruction
src_op1	Instruction.h	/^        int src_op1;$/;"	m	struct:Instruction
src_op2	Instruction.h	/^        int src_op2;$/;"	m	struct:Instruction
verify	dfg-gen.cpp	/^void verify(const std::vector<Operand*> &op_array, int sub_out[N][N]){$/;"	f
