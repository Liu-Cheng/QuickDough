!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	Makefile	/^CC = gcc$/;"	m
CCFLAGS	Makefile	/^CCFLAGS = -xc -ansi -Wall $/;"	m
INC	Makefile	/^INC = -I..\/include $/;"	m
LIBS	Makefile	/^LIBS = -lm -lc$/;"	m
STR_SZ	svd.c	36;"	d	file:
applyHouseCols	svd.c	/^void applyHouseCols(ComplexFloat *a, ComplexFloat *v, int vLen, int theRow,$/;"	f
applyHouseRows	svd.c	/^void applyHouseRows(ComplexFloat *a, ComplexFloat *v, int vsize, int theCol, $/;"	f
bidiagonalize	svd.c	/^void bidiagonalize(int rows, int cols, $/;"	f
bool	svd.c	/^typedef int bool;$/;"	t	file:
cleanMem	svd.c	/^void cleanMem( tMemory *M)$/;"	f
compute_allowable_error	svdVerify.c	/^float compute_allowable_error(int rows, int cols )$/;"	f
diagonalize	svd.c	/^int diagonalize(float *d, float*sd, float *ur, float *vr, int m_diagLen)$/;"	f
extractBidiagonalMatrix	svd.c	/^void extractBidiagonalMatrix(ComplexFloat *a, float *d, float *s, $/;"	f
false	svd.c	35;"	d	file:
givens	svd.c	/^float givens(double a, double b, double *c, double *s)$/;"	f
gkSvdStep	svd.c	/^void gkSvdStep(float *diag, float *super_diag,$/;"	f
houseCplx	svd.c	/^void houseCplx(ComplexFloat *v, int size, ComplexFloat *beta)$/;"	f
m_diag	svd.c	/^   float        *m_diag;$/;"	m	struct:__anon1	file:
m_q	svd.c	/^   ComplexFloat *m_q;$/;"	m	struct:__anon1	file:
m_r	svd.c	/^   ComplexFloat *m_r;$/;"	m	struct:__anon1	file:
m_sdiag	svd.c	/^   float        *m_sdiag;$/;"	m	struct:__anon1	file:
m_tmpBV	svd.c	/^   ComplexFloat *m_tmpBV;$/;"	m	struct:__anon1	file:
m_tmpBW	svd.c	/^   ComplexFloat *m_tmpBW;$/;"	m	struct:__anon1	file:
m_tmpP	svd.c	/^   ComplexFloat *m_tmpP;$/;"	m	struct:__anon1	file:
m_tmpV	svd.c	/^   ComplexFloat *m_tmpV;$/;"	m	struct:__anon1	file:
m_tmpW	svd.c	/^   ComplexFloat *m_tmpW;$/;"	m	struct:__anon1	file:
m_uPreQr	svd.c	/^   ComplexFloat *m_uPreQr;$/;"	m	struct:__anon1	file:
m_ur	svd.c	/^   float        *m_ur;$/;"	m	struct:__anon1	file:
m_urs	svd.c	/^   float        *m_urs;$/;"	m	struct:__anon1	file:
m_ut	svd.c	/^   ComplexFloat *m_ut;$/;"	m	struct:__anon1	file:
m_vr	svd.c	/^   float        *m_vr;$/;"	m	struct:__anon1	file:
m_vrs	svd.c	/^   float        *m_vrs;$/;"	m	struct:__anon1	file:
m_vt	svd.c	/^   ComplexFloat *m_vt;$/;"	m	struct:__anon1	file:
main	svd.c	/^int main(int argc, char **argv)$/;"	f
main	svdVerify.c	/^int main(int argc, char **argv)$/;"	f
makePositive	svd.c	/^void makePositive(float *sVals, int len, float *vr, float *vrEnd, int vrStride)$/;"	f
mat_mult_cx_by_cx	svd.c	/^void mat_mult_cx_by_cx(int rows, int cols, ComplexFloat *rslt, ComplexFloat *m0, ComplexFloat *m1)$/;"	f
mat_mult_cx_by_real	svd.c	/^void mat_mult_cx_by_real(int rows, int cols, ComplexFloat *rslt, ComplexFloat *m0, float *m1)$/;"	f
partitionBiDiag	svd.c	/^void partitionBiDiag(float *sd, int *b11Size,$/;"	f
qr	svd.c	/^void qr(int rows, int cols, ComplexFloat *A, $/;"	f
setupMem	svd.c	/^void setupMem(int m, int n, tMemory *M)$/;"	f
sortSingulars	svd.c	/^void sortSingulars(float *startLook, int len, ComplexFloat *s,$/;"	f
sqr	svdVerify.c	29;"	d	file:
svd	svd.c	/^int svd(int m, int n,$/;"	f
svdGenerator	svdGenerator.m	/^function svdGenerator(DataSetNum, NumRows, NumCols)$/;"	f
svdLatency	svdLatency.m	/^function latency = svdLatency(DataSetNum)$/;"	f
svdThroughput	svdThroughput.m	/^function throughput = svdThroughput(DataSetNum)$/;"	f
svdWorkload	svdWorkload.m	/^function workload = svdWorkload(DataSetNum,varargin)$/;"	f
tMemory	svd.c	/^}tMemory;$/;"	t	typeref:struct:__anon1	file:
true	svd.c	34;"	d	file:
verify	svdVerify.c	/^int verify(int rows, int cols, float allowable_error, ComplexFloat *A,$/;"	f
