14d13
< void loop_io_addr_remap(const std::string &dfg_name);
18c17
< 
---
> int end_id = 500;
34d32
<     loop_io_addr_remap(dfg_name);
693,801d690
< 
< void loop_io_addr_remap(const std::string &dfg_name){
< 
<     std::ostringstream oss;
<     oss << dfg_name << "_kernel_io.txt";
<     std::ofstream fHandle;
<     fHandle.open(oss.str().c_str());
<     if(!fHandle.is_open()){
<         std::cout << "Failed to open " << oss.str() << "\n";
<         exit(EXIT_FAILURE);
<     }
< 
<     int remapped_bram0_addr = 0;
<     int remapped_bram1_addr = 0;
<     int const_in_addr[const_num];
<     int sub_in_addr[BR*C/4+18];
<     int sub_out_addr[BR*C/4];
<     
<     for(int i=0; i<const_num; i++){
<         const_in_addr[i] = remapped_bram0_addr;
<         remapped_bram0_addr++ ;
<     }
< 
<     // Input pixl array
<     for(int i=0; i<BR*C/4; i++){
<         sub_in_addr[i] = remapped_bram0_addr;
<         remapped_bram0_addr ++ ;
<     }
< 
<     // Sobel operator
<     for(int i=0; i<18; i++){
<         sub_in_addr[BR*C/4+i] = remapped_bram0_addr;
<         remapped_bram0_addr++;
<     }
< 
<     // Output pixl array
<     for(int i=0; i<BR*C/4; i++){
<         sub_out_addr[i] = remapped_bram1_addr;
<         remapped_bram1_addr ++;
<     }
<     
<     const int work_item_io_num = const_num + (R*C/4 + 18) + R*C/4; // total number of work-item's io operand
<     const int kernel_it_num = (BR-2)/(R-2); // total number of the kernel iteration
<     int kernel_io_addr[work_item_io_num][kernel_it_num+1]; // The first column represents kernel op_id
< 
<     // Here we assume that work_item_op_id can be used as index directly.
<     // If not, we need map this op_id to sequential array index.
<     int it=1;
<     int row_index;
<     for(int p=0; p<kernel_it_num; p++){
< 
<         row_index = 0;
< 
<         // Constant work-item input
<         for(int i=0; i<const_num; i++){
<             kernel_io_addr[row_index][it] = const_in_addr[i];
<             if(p==0){
<                 kernel_io_addr[row_index][0] = data_to_id(const_in[i]);
<             }
<             row_index++;
<         }
< 
<         // Normal work-item input i.e. sub_in[R*C/4+18]
<         for(int i=0; i<R*C/4; i++){
<             kernel_io_addr[row_index][it] = sub_in_addr[p*(R-2)*C/4+i];
<             if(p==0){
<                 kernel_io_addr[row_index][0] = data_to_id(i, INVAR);
<             }
<             row_index++;
<         }
< 
<         // The 18 sobel operator
<         for(int i=0; i<18; i++){
<             kernel_io_addr[row_index][it] = sub_in_addr[BR*C/4+i];
<             if(p==0){
<                 kernel_io_addr[row_index][0] = data_to_id(R*C/4+i, INVAR);
<             }
<             row_index++;
<         }
< 
<         //Normal output
<         for(int i=0; i<R; i++){
<             for(int j=0; j<C; j=j+4){
<                 int out_index = ((p*(R-2)+i)*C+j)/4;
<                 kernel_io_addr[row_index][it] = sub_out_addr[out_index];
<                 if(p==0){
<                     kernel_io_addr[row_index][0] = data_to_id((i*C+j)/4, OUTVAR);
<                 }
<                 row_index++;
<             }
<         }
<         
<         //Intermediate output
< 
<         it++;
<     }
< 
< 
<     //Dump the io addr of the whole kernel
<     for(int i=0; i<work_item_io_num; i++){
<         for(int j=0; j<kernel_it_num+1; j++){
<             fHandle << kernel_io_addr[i][j] << " ";
<         }
<         fHandle << std::endl;
<     }
<     fHandle.close();
< 
< }
< 
