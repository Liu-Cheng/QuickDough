// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "axi_interfaces_reverseBytes64.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const bool axi_interfaces_reverseBytes64::ap_true = true;
const sc_lv<32> axi_interfaces_reverseBytes64::ap_const_lv32_8 = "1000";
const sc_lv<32> axi_interfaces_reverseBytes64::ap_const_lv32_F = "1111";
const sc_lv<32> axi_interfaces_reverseBytes64::ap_const_lv32_10 = "10000";
const sc_lv<32> axi_interfaces_reverseBytes64::ap_const_lv32_17 = "10111";
const sc_lv<32> axi_interfaces_reverseBytes64::ap_const_lv32_18 = "11000";
const sc_lv<32> axi_interfaces_reverseBytes64::ap_const_lv32_1F = "11111";
const sc_lv<32> axi_interfaces_reverseBytes64::ap_const_lv32_28 = "101000";
const sc_lv<32> axi_interfaces_reverseBytes64::ap_const_lv32_2F = "101111";
const sc_lv<32> axi_interfaces_reverseBytes64::ap_const_lv32_30 = "110000";
const sc_lv<32> axi_interfaces_reverseBytes64::ap_const_lv32_37 = "110111";
const sc_lv<32> axi_interfaces_reverseBytes64::ap_const_lv32_38 = "111000";
const sc_lv<32> axi_interfaces_reverseBytes64::ap_const_lv32_3F = "111111";
const sc_lv<32> axi_interfaces_reverseBytes64::ap_const_lv32_20 = "100000";
const sc_lv<32> axi_interfaces_reverseBytes64::ap_const_lv32_27 = "100111";
const sc_logic axi_interfaces_reverseBytes64::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic axi_interfaces_reverseBytes64::ap_const_logic_0 = sc_dt::Log_0;

axi_interfaces_reverseBytes64::axi_interfaces_reverseBytes64(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_return);
    sensitive << ( tmp_fu_43_p1 );
    sensitive << ( tmp_1_fu_47_p4 );
    sensitive << ( tmp_2_fu_57_p4 );
    sensitive << ( tmp_9_fu_67_p4 );
    sensitive << ( tmp_5_fu_107_p4 );
    sensitive << ( tmp_s_fu_77_p4 );
    sensitive << ( tmp_3_fu_87_p4 );
    sensitive << ( tmp_4_fu_97_p4 );

    SC_METHOD(thread_tmp_1_fu_47_p4);
    sensitive << ( in_r );

    SC_METHOD(thread_tmp_2_fu_57_p4);
    sensitive << ( in_r );

    SC_METHOD(thread_tmp_3_fu_87_p4);
    sensitive << ( in_r );

    SC_METHOD(thread_tmp_4_fu_97_p4);
    sensitive << ( in_r );

    SC_METHOD(thread_tmp_5_fu_107_p4);
    sensitive << ( in_r );

    SC_METHOD(thread_tmp_9_fu_67_p4);
    sensitive << ( in_r );

    SC_METHOD(thread_tmp_fu_43_p1);
    sensitive << ( in_r );

    SC_METHOD(thread_tmp_s_fu_77_p4);
    sensitive << ( in_r );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "axi_interfaces_reverseBytes64_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, in_r, "(port)in_r");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_fu_43_p1, "tmp_fu_43_p1");
    sc_trace(mVcdFile, tmp_1_fu_47_p4, "tmp_1_fu_47_p4");
    sc_trace(mVcdFile, tmp_2_fu_57_p4, "tmp_2_fu_57_p4");
    sc_trace(mVcdFile, tmp_9_fu_67_p4, "tmp_9_fu_67_p4");
    sc_trace(mVcdFile, tmp_5_fu_107_p4, "tmp_5_fu_107_p4");
    sc_trace(mVcdFile, tmp_s_fu_77_p4, "tmp_s_fu_77_p4");
    sc_trace(mVcdFile, tmp_3_fu_87_p4, "tmp_3_fu_87_p4");
    sc_trace(mVcdFile, tmp_4_fu_97_p4, "tmp_4_fu_97_p4");
#endif

    }
}

axi_interfaces_reverseBytes64::~axi_interfaces_reverseBytes64() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void axi_interfaces_reverseBytes64::thread_ap_return() {
    ap_return = esl_concat<56,8>(esl_concat<48,8>(esl_concat<40,8>(esl_concat<32,8>(esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(tmp_fu_43_p1.read(), tmp_1_fu_47_p4.read()), tmp_2_fu_57_p4.read()), tmp_9_fu_67_p4.read()), tmp_5_fu_107_p4.read()), tmp_s_fu_77_p4.read()), tmp_3_fu_87_p4.read()), tmp_4_fu_97_p4.read());
}

void axi_interfaces_reverseBytes64::thread_tmp_1_fu_47_p4() {
    tmp_1_fu_47_p4 = in_r.read().range(15, 8);
}

void axi_interfaces_reverseBytes64::thread_tmp_2_fu_57_p4() {
    tmp_2_fu_57_p4 = in_r.read().range(23, 16);
}

void axi_interfaces_reverseBytes64::thread_tmp_3_fu_87_p4() {
    tmp_3_fu_87_p4 = in_r.read().range(55, 48);
}

void axi_interfaces_reverseBytes64::thread_tmp_4_fu_97_p4() {
    tmp_4_fu_97_p4 = in_r.read().range(63, 56);
}

void axi_interfaces_reverseBytes64::thread_tmp_5_fu_107_p4() {
    tmp_5_fu_107_p4 = in_r.read().range(39, 32);
}

void axi_interfaces_reverseBytes64::thread_tmp_9_fu_67_p4() {
    tmp_9_fu_67_p4 = in_r.read().range(31, 24);
}

void axi_interfaces_reverseBytes64::thread_tmp_fu_43_p1() {
    tmp_fu_43_p1 = in_r.read().range(8-1, 0);
}

void axi_interfaces_reverseBytes64::thread_tmp_s_fu_77_p4() {
    tmp_s_fu_77_p4 = in_r.read().range(47, 40);
}

}

