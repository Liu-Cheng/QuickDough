// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.3
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef XFIR_IP_H
#define XFIR_IP_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xfir_ip_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Slv0_BaseAddress;
} XFir_ip_Config;
#endif

typedef struct {
    u32 Slv0_BaseAddress;
    u32 IsReady;
} XFir_ip;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XFir_ip_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XFir_ip_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XFir_ip_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XFir_ip_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XFir_ip_Initialize(XFir_ip *InstancePtr, u16 DeviceId);
XFir_ip_Config* XFir_ip_LookupConfig(u16 DeviceId);
int XFir_ip_CfgInitialize(XFir_ip *InstancePtr, XFir_ip_Config *ConfigPtr);
#else
int XFir_ip_Initialize(XFir_ip *InstancePtr, const char* InstanceName);
int XFir_ip_Release(XFir_ip *InstancePtr);
#endif

void XFir_ip_Start(XFir_ip *InstancePtr);
u32 XFir_ip_IsDone(XFir_ip *InstancePtr);
u32 XFir_ip_IsIdle(XFir_ip *InstancePtr);
u32 XFir_ip_IsReady(XFir_ip *InstancePtr);
void XFir_ip_EnableAutoRestart(XFir_ip *InstancePtr);
void XFir_ip_DisableAutoRestart(XFir_ip *InstancePtr);


void XFir_ip_InterruptGlobalEnable(XFir_ip *InstancePtr);
void XFir_ip_InterruptGlobalDisable(XFir_ip *InstancePtr);
void XFir_ip_InterruptEnable(XFir_ip *InstancePtr, u32 Mask);
void XFir_ip_InterruptDisable(XFir_ip *InstancePtr, u32 Mask);
void XFir_ip_InterruptClear(XFir_ip *InstancePtr, u32 Mask);
u32 XFir_ip_InterruptGetEnabled(XFir_ip *InstancePtr);
u32 XFir_ip_InterruptGetStatus(XFir_ip *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
