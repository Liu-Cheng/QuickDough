!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALL	Makefile	/^ALL = db dbVerify$/;"	m
BLACK	rbtree.h	/^typedef enum { RED, BLACK } color_t;$/;"	e	enum:__anon5
CC	Makefile	/^CC  = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS   = -ansi -x c -I$(INCLUDE) -Wall -DPCA_DB_MEM$/;"	m
CXX	Makefile	/^CXX = $(CC)$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = $(CFLAGS)$/;"	m
DBCmd	db.c	/^} DBCmd;$/;"	t	typeref:struct:__anon3	file:
DBCmd_clean	db.c	/^void DBCmd_clean(DBCmd* p_rv) $/;"	f
DBCmd_initDelete	db.c	/^void DBCmd_initDelete(DBCmd* p_cmd, float f0, float f1)$/;"	f
DBCmd_initEnd	db.c	/^void DBCmd_initEnd(DBCmd* p_cmd)$/;"	f
DBCmd_initInsert	db.c	/^void DBCmd_initInsert(DBCmd* p_cmd, float f0, float f1)$/;"	f
DBCmd_initSelect	db.c	/^void DBCmd_initSelect(DBCmd* p_cmd, float f0, float f1, float f2, float f3)$/;"	f
DBState	db.c	/^} DBState;$/;"	t	typeref:struct:__anon4	file:
DBState_clean	db.c	/^void DBState_clean(DBState* p_state) $/;"	f
DBState_load	db.c	/^void DBState_load(DBState* p_state, char* m_paramfile, char* m_instfile)$/;"	f
DELETE	db.c	/^typedef enum { SELECT, INSERT, DELETE, END } cmd_t;$/;"	e	enum:__anon2	file:
DELETE_OP_FLAG	db.c	46;"	d	file:
END	db.c	/^typedef enum { SELECT, INSERT, DELETE, END } cmd_t;$/;"	e	enum:__anon2	file:
END_OF_CYCLE_FLAG	db.c	43;"	d	file:
INCLUDE	Makefile	/^INCLUDE = ..\/include$/;"	m
INSERT	db.c	/^typedef enum { SELECT, INSERT, DELETE, END } cmd_t;$/;"	e	enum:__anon2	file:
INSERT_OP_FLAG	db.c	45;"	d	file:
LinkList	list.h	/^typedef struct LinkListStruct LinkList;$/;"	t	typeref:struct:LinkListStruct
LinkListIterator	list.h	/^} LinkListIterator;$/;"	t	typeref:struct:__anon1
LinkListIterator_atEnd	list.c	/^bool LinkListIterator_atEnd(const LinkListIterator* p_it)$/;"	f
LinkListIterator_clean	list.c	/^void LinkListIterator_clean(LinkListIterator* p_it)$/;"	f
LinkListIterator_init	list.c	/^void LinkListIterator_init(LinkListIterator* p_it, LinkList* p_list)$/;"	f
LinkListIterator_next	list.c	/^void LinkListIterator_next(LinkListIterator* p_it)$/;"	f
LinkListIterator_remove	list.c	/^bool LinkListIterator_remove(LinkListIterator* p_it, TrackRecord** p_rec)$/;"	f
LinkListIterator_set	list.c	/^void LinkListIterator_set(LinkListIterator* p_it, LinkList* p_list)$/;"	f
LinkListIterator_value	list.c	/^TrackRecord* LinkListIterator_value(const LinkListIterator* p_it)$/;"	f
LinkListNode	list.h	/^typedef struct LinkListNodeStruct LinkListNode;$/;"	t	typeref:struct:LinkListNodeStruct
LinkListNodeStruct	list.h	/^struct LinkListNodeStruct$/;"	s
LinkListNode_create	list.c	/^LinkListNode* LinkListNode_create(TrackRecord* p_val,$/;"	f
LinkListNode_destroy	list.c	/^void LinkListNode_destroy(LinkListNode* p_node)$/;"	f
LinkListStruct	list.h	/^struct LinkListStruct$/;"	s
LinkList_append	list.c	/^void LinkList_append(LinkList* p_list, TrackRecord* const p_val)$/;"	f
LinkList_clean	list.c	/^void LinkList_clean(LinkList* p_list)$/;"	f
LinkList_getIterator	list.c	/^void LinkList_getIterator(LinkListIterator* p_it, LinkList* p_list)$/;"	f
LinkList_getNode	list.c	/^LinkListNode* LinkList_getNode(const LinkList* const p_list, const int i)$/;"	f
LinkList_init	list.c	/^void LinkList_init(LinkList* p_list)$/;"	f
LinkList_remove	list.c	/^bool LinkList_remove(LinkList* p_list, const int i, TrackRecord** p_val)$/;"	f
LinkList_removeNode	list.c	/^bool LinkList_removeNode(LinkList* p_list, LinkListNode* p_node, $/;"	f
M	db.c	/^  int M;                 \/* number of grid rows *\/$/;"	m	struct:__anon4	file:
N	db.c	/^  int N;                 \/* number of grid columns *\/$/;"	m	struct:__anon4	file:
NUM_LL_BLOCKS	db.c	38;"	d	file:
NUM_RB_BLOCKS	db.c	39;"	d	file:
NUM_TR_BLOCKS	db.c	40;"	d	file:
OBJ	Makefile	/^OBJ = list.o rbtree.o db.o $(INCLUDE)\/PcaCMemMgr.o$/;"	m
RED	rbtree.h	/^typedef enum { RED, BLACK } color_t;$/;"	e	enum:__anon5
RedBlackIterator	rbtree.h	/^} RedBlackIterator;$/;"	t	typeref:struct:__anon6
RedBlackIterator_clean	rbtree.c	/^void RedBlackIterator_clean(RedBlackIterator* p_it)$/;"	f
RedBlackIterator_init	rbtree.c	/^void RedBlackIterator_init(RedBlackIterator* p_rv, $/;"	f
RedBlackIterator_next	rbtree.c	/^void RedBlackIterator_next(RedBlackIterator* p_it)$/;"	f
RedBlackIterator_remove	rbtree.c	/^bool RedBlackIterator_remove(RedBlackIterator* p_it, TrackRecord** p_rv)$/;"	f
RedBlackIterator_value	rbtree.c	/^TrackRecord* RedBlackIterator_value(RedBlackIterator* p_it)$/;"	f
RedBlackNode	rbtree.h	/^typedef struct RedBlackNodeStruct RedBlackNode;$/;"	t	typeref:struct:RedBlackNodeStruct
RedBlackNodeStruct	rbtree.h	/^struct RedBlackNodeStruct$/;"	s
RedBlackNode_create	rbtree.c	/^RedBlackNode* RedBlackNode_create(const float k, $/;"	f
RedBlackNode_destroy	rbtree.c	/^void RedBlackNode_destroy(RedBlackNode* p_rb)$/;"	f
RedBlackTree	rbtree.h	/^typedef struct RedBlackTreeStruct RedBlackTree;$/;"	t	typeref:struct:RedBlackTreeStruct
RedBlackTreeStruct	rbtree.h	/^struct RedBlackTreeStruct$/;"	s
RedBlackTree_clean	rbtree.c	/^void RedBlackTree_clean(RedBlackTree* p_tree)$/;"	f
RedBlackTree_destroySubtree	rbtree.c	/^void RedBlackTree_destroySubtree(RedBlackTree* p_tree, RedBlackNode* p_node) $/;"	f
RedBlackTree_find	rbtree.c	/^void RedBlackTree_find(RedBlackIterator* p_rv, RedBlackTree* p_tree, $/;"	f
RedBlackTree_findNextLargest	rbtree.c	/^void RedBlackTree_findNextLargest(RedBlackIterator* p_rv, $/;"	f
RedBlackTree_findNode	rbtree.c	/^RedBlackNode* RedBlackTree_findNode(RedBlackTree* p_tree, float key)$/;"	f
RedBlackTree_fixInsert	rbtree.c	/^void RedBlackTree_fixInsert(RedBlackTree* p_tree, $/;"	f
RedBlackTree_fixRemove	rbtree.c	/^bool RedBlackTree_fixRemove(RedBlackTree* p_tree,$/;"	f
RedBlackTree_getIterator	rbtree.c	/^void RedBlackTree_getIterator(RedBlackIterator* p_rv,$/;"	f
RedBlackTree_init	rbtree.c	/^void RedBlackTree_init(RedBlackTree* p_tree)$/;"	f
RedBlackTree_insert	rbtree.c	/^void RedBlackTree_insert(RedBlackTree* p_tree, float key, TrackRecord* val)$/;"	f
RedBlackTree_reroot	rbtree.c	/^void RedBlackTree_reroot(RedBlackTree* p_tree, $/;"	f
RedBlackTree_rotateLeft	rbtree.c	/^void RedBlackTree_rotateLeft(RedBlackTree* p_tree, $/;"	f
RedBlackTree_rotateRight	rbtree.c	/^void RedBlackTree_rotateRight(RedBlackTree* p_tree, $/;"	f
RedBlackTree_size	rbtree.c	/^uint RedBlackTree_size(const RedBlackTree* const p_tree)$/;"	f
SEARCH_OP_FLAG	db.c	44;"	d	file:
SELECT	db.c	/^typedef enum { SELECT, INSERT, DELETE, END } cmd_t;$/;"	e	enum:__anon2	file:
TrackRecord	list.h	/^typedef struct TrackRecordStruct TrackRecord;$/;"	t	typeref:struct:TrackRecordStruct
TrackRecordStruct	db.c	/^struct TrackRecordStruct$/;"	s	file:
TrackRecord_create	db.c	/^TrackRecord* TrackRecord_create(int id, float c0, float c1)$/;"	f
TrackRecord_destroy	db.c	/^void TrackRecord_destroy(TrackRecord* p_rv) $/;"	f
TrackRecord_isequal	db.c	/^bool TrackRecord_isequal(TrackRecord* p_tr0, TrackRecord* p_tr1)$/;"	f
_DBMEM_H_	dbmem.h	15;"	d
_LIST_H	list.h	15;"	d
_RBTREE_H_	rbtree.h	18;"	d
atEnd	list.h	/^  bool atEnd;$/;"	m	struct:__anon1
atEnd	rbtree.h	/^  bool atEnd;$/;"	m	struct:__anon6
bool	dbmem.h	/^typedef unsigned char bool;$/;"	t
cmdType	db.c	/^  cmd_t cmdType;$/;"	m	struct:__anon3	file:
cmd_t	db.c	/^typedef enum { SELECT, INSERT, DELETE, END } cmd_t;$/;"	t	typeref:enum:__anon2	file:
color	rbtree.h	/^  color_t color;$/;"	m	struct:RedBlackNodeStruct
color_t	rbtree.h	/^typedef enum { RED, BLACK } color_t;$/;"	t	typeref:enum:__anon5
dX	db.c	/^  int dX;                \/* grid row search size *\/$/;"	m	struct:__anon4	file:
dY	db.c	/^  int dY;                \/* grid col search size *\/$/;"	m	struct:__anon4	file:
dbGenerator	dbGenerator.m	/^function dbGenerator(id, M, N, ...$/;"	f
dbLatency	dbLatency.m	/^function l = dbLatency(id)$/;"	f
dbThroughput	dbThroughput.m	/^function t = dbThroughput(id)$/;"	f
dbWorkload	dbWorkload.m	/^function w = dbWorkload(id)$/;"	f
delete_cycle	db.c	/^  int delete_cycle;      \/* delete ops\/cycle (loaded from file) *\/$/;"	m	struct:__anon4	file:
false	list.c	17;"	d	file:
false	rbtree.c	20;"	d	file:
id	db.c	/^  int id;$/;"	m	struct:TrackRecordStruct	file:
insert_cycle	db.c	/^  int insert_cycle;      \/* insert ops\/cycle (loaded from file) *\/$/;"	m	struct:__anon4	file:
itList	rbtree.h	/^  LinkListIterator itList;$/;"	m	struct:__anon6
key	rbtree.h	/^  float key;$/;"	m	struct:RedBlackNodeStruct
length	list.h	/^  int length;$/;"	m	struct:LinkListStruct
ll_clean	dbmem.h	36;"	d
ll_clean	dbmem.h	59;"	d
ll_free	dbmem.h	38;"	d
ll_free	dbmem.h	61;"	d
ll_init	dbmem.h	35;"	d
ll_init	dbmem.h	58;"	d
ll_malloc	dbmem.h	37;"	d
ll_malloc	dbmem.h	60;"	d
ll_mm	dbmem.h	/^MemManager ll_mm, rb_mm, tr_mm;$/;"	v
m_cmds	db.c	/^  DBCmd* m_cmds;$/;"	m	struct:__anon4	file:
m_record	list.h	/^  TrackRecord*               m_record;$/;"	m	struct:LinkListNodeStruct
main	db.c	/^int main(int argc, char** argv)$/;"	f
main	dbVerify.c	/^int main(int argc, char** argv)$/;"	f
max_id	db.c	/^  int max_id;            \/* keeps track of the max id used *\/$/;"	m	struct:__anon4	file:
num_cycles	db.c	/^  int num_cycles;        \/* number of cycles *\/$/;"	m	struct:__anon4	file:
p_currcmd	db.c	/^  DBCmd* p_currcmd;$/;"	m	struct:__anon4	file:
p_current	list.h	/^  LinkListNode* p_current;$/;"	m	struct:__anon1
p_current	rbtree.h	/^  RedBlackNode* p_current;$/;"	m	struct:__anon6
p_head	list.h	/^  LinkListNode* p_head;$/;"	m	struct:LinkListStruct
p_lastcmd	db.c	/^  DBCmd* p_lastcmd;$/;"	m	struct:__anon4	file:
p_left	rbtree.h	/^  struct RedBlackNodeStruct* p_left;$/;"	m	struct:RedBlackNodeStruct	typeref:struct:RedBlackNodeStruct::RedBlackNodeStruct
p_ll	list.h	/^  LinkList* p_ll;$/;"	m	struct:__anon1
p_next	list.h	/^  struct LinkListNodeStruct* p_next;$/;"	m	struct:LinkListNodeStruct	typeref:struct:LinkListNodeStruct::LinkListNodeStruct
p_prev	list.h	/^  struct LinkListNodeStruct* p_prev;$/;"	m	struct:LinkListNodeStruct	typeref:struct:LinkListNodeStruct::LinkListNodeStruct
p_right	rbtree.h	/^  struct RedBlackNodeStruct* p_right;$/;"	m	struct:RedBlackNodeStruct	typeref:struct:RedBlackNodeStruct::RedBlackNodeStruct
p_root	rbtree.h	/^  RedBlackNode* p_root;$/;"	m	struct:RedBlackTreeStruct
p_tail	list.h	/^  LinkListNode* p_tail;$/;"	m	struct:LinkListStruct
p_tree	rbtree.h	/^  RedBlackTree* p_tree;$/;"	m	struct:__anon6
p_up	rbtree.h	/^  struct RedBlackNodeStruct* p_up;$/;"	m	struct:RedBlackNodeStruct	typeref:struct:RedBlackNodeStruct::RedBlackNodeStruct
rb_clean	dbmem.h	40;"	d
rb_clean	dbmem.h	63;"	d
rb_free	dbmem.h	42;"	d
rb_free	dbmem.h	65;"	d
rb_init	dbmem.h	39;"	d
rb_init	dbmem.h	62;"	d
rb_malloc	dbmem.h	41;"	d
rb_malloc	dbmem.h	64;"	d
rb_mm	dbmem.h	/^MemManager ll_mm, rb_mm, tr_mm;$/;"	v
runDatabase	db.c	/^void runDatabase(DBState* p_state)$/;"	f
searchTree	db.c	/^  RedBlackTree searchTree;$/;"	m	struct:__anon4	file:
search_cycle	db.c	/^  int search_cycle;      \/* search ops\/cycle (loaded from file) *\/$/;"	m	struct:__anon4	file:
size	rbtree.h	/^  int size;$/;"	m	struct:RedBlackTreeStruct
sresults	db.c	/^  PcaCArrayInt sresults; \/* search results *\/$/;"	m	struct:__anon4	file:
sresults_idx	db.c	/^  int sresults_idx;      \/* search results index *\/$/;"	m	struct:__anon4	file:
total_records	db.c	/^  int total_records;     \/* total number of records *\/$/;"	m	struct:__anon4	file:
tr_clean	dbmem.h	44;"	d
tr_clean	dbmem.h	67;"	d
tr_free	dbmem.h	46;"	d
tr_free	dbmem.h	69;"	d
tr_init	dbmem.h	43;"	d
tr_init	dbmem.h	66;"	d
tr_malloc	dbmem.h	45;"	d
tr_malloc	dbmem.h	68;"	d
tr_mm	dbmem.h	/^MemManager ll_mm, rb_mm, tr_mm;$/;"	v
true	list.c	16;"	d	file:
true	rbtree.c	19;"	d	file:
uint	dbVerify.c	/^typedef unsigned int uint;$/;"	t	file:
uint	dbmem.h	/^typedef unsigned int uint;$/;"	t
valList	rbtree.h	/^  LinkList valList;$/;"	m	struct:RedBlackNodeStruct
x	db.c	/^  float x, y;$/;"	m	struct:TrackRecordStruct	file:
x0	db.c	/^  float x0, y0, x1, y1;$/;"	m	struct:__anon3	file:
x1	db.c	/^  float x0, y0, x1, y1;$/;"	m	struct:__anon3	file:
y	db.c	/^  float x, y;$/;"	m	struct:TrackRecordStruct	file:
y0	db.c	/^  float x0, y0, x1, y1;$/;"	m	struct:__anon3	file:
y1	db.c	/^  float x0, y0, x1, y1;$/;"	m	struct:__anon3	file:
