Filename:     README.txt

Date:         May 6, 2005

Author:       Hector Chan, MIT Lincoln Laboratory

Description:  The following Readme gives a description of the standard
              C Pattern Match kernel. Topics include:
	      -Kernel Description.
	      -File Descriptions.
              -Generating Data (matlab required) & Pre-generated Datasets
	      -Compiling the Application and Verification Tool
	      -Running the Application and Verification Tool
	      -Workload and Throughput Calculations (Matlab required)

Disclaimer:   
 Copyright (c) 2006, Massachusetts Institute of Technology
 All rights reserved.
 
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are  
 met:
     * Redistributions of source code must retain the above copyright
       notice, this list of conditions and the following disclaimer.
     * Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.
     * Neither the name of the Massachusetts Institute of Technology nor  
       the names of its contributors may be used to endorse or promote 
       products derived from this software without specific prior written 
       permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF  
 THE POSSIBILITY OF SUCH DAMAGE.


Kernel Description:
___________________________________________________________________________
The pattern match kernel involves overlaying two vectors, a and t, of the
same length, and computing a metric that quantifies the degree to which 
these two vectors match. The kernel begins by generating a set of reference
vectors referred to as the template library. Then, the test pattern t is 
generated by distorting a randomly chosen pattern from the pattern library. 
At the end, the pattern will be matched against all other patterns in the 
original template library. The metric used for matching is the weighted 
mean square error (MSE).



Files:
___________________________________________________________________________
	pm.c            - C kernel code
	pmGenerator.m   - matlab function to generate inputs/outputs
        pmLatency.m     - matlab function to obtain the kernel latency
	pmThroughput.m  - matlab function to calculate throughput
	pmVerify.c      - C code to verify kernel
	pmWorkload.m	- matlab function to calculate workload
	Makefile	- Makefile for kernel and verifier
	README.txt      - this file



Generating Data (matlab required)
___________________________________________________________________________
To generate random data within matlab, invoke the pmGenerator 

    pmGenerator(DataSetNum, NoiseLevel, 
                SigLevel1, SigLevel2, RandLevel, 
                PatternLength, LibPatterns)

    Inputs:
      DataSetNum    - the pattern library and test pattern will be written to
                      files in the following format: <DataSetNum>-pm-<desc>.dat
      NoiseLevel    - see figure below
      SigLevel1     - see figure below
      SigLevel2     - see figure below
      RandLevel     - this is the measure of the distortion of the test pattern
      PatternLength - see figure below
      LibPatterns   - this specifies the number of patterns in the library
 
    Outputs:
      Files: ./data/<DataSetNum>-pm-lib.dat     - the pattern library
             ./data/<DataSetNum>-pm-pattern.dat - the test pattern
             ./data/<DataSetNum>-pm-patnum.dat  - the index of the test pattern
                                                  in the pattern library

    Patterns generated by this function have the following structure:


                         _          _                        <- SigLevel2
                        | |        | |
     width=4            | |        | |            width=4
      |   |             | |        | |             |   |
    ->|   |<-           | |        | |           ->|   |<-
                        | |        | |
           _____________| |________| |_____________          <- SigLevel1
          |                                        |
       ___|                                        |___      <- NoiseLevel
      |________________________________________________|     <- zero
 
      |----------------- PatternLength ----------------|


For more information, type "help pmGenerator" in matlab.


Pre-generated Data
___________________________________________________________________________
If matlab is not available, or you do not wish to use matlab, we have 
provided two pre-generated parameter sets. They are located in the data
sub-directory, and are identified by a parameter set number. The values 
of the two parameter sets are as follows:

Data Set 1
--------------------------
NoiseLevel    = 0.1
SigLevel1     = 10
SigLevel2     = 40
RandLevel     = 0.02
PatternLength = 64
LibPatterns   = 72

Data Set 2
--------------------------
NoiseLevel    = 0.1
SigLevel1     = 10
SigLevel2     = 40
RandLevel     = 0.02
PatternLength = 128
LibPatterns   = 256



Compiling the Application and Verification Tool
___________________________________________________________________________
To compile the application and the verification tool, run

  make

To clean the directory of executables, run

  make clean



Running Application and Verification Tool
___________________________________________________________________________

Once the application has been compiled, it may be invoked as follows:

  pm <data_set_number>

data_set_number tells the kernel which data set to run. The user can run other
data sets generated by the pmGenerator Matlab function. By passing the kernel
the appropriate data set number. Inputs and Outputs are stored in the data
subdirectory. If you run ls, you should see the following:

  % ls -l
  total 224
  -rw-r--r--  1 chanh games  18452 May  5 15:47 0-pm-lib.dat
  -rw-r--r--  1 chanh games     24 May  5 15:47 0-pm-origpatnum.dat
  -rw-r--r--  1 chanh games     24 May  6 13:20 0-pm-patnum.dat      <- Output
  -rw-r--r--  1 chanh games    276 May  5 15:47 0-pm-pattern.dat
  -rw-r--r--  1 chanh games     24 May  6 13:20 0-pm-timing.dat      <- Output
  -rw-r--r--  1 chanh games 131092 May  6 13:20 1-pm-lib.dat
  -rw-r--r--  1 chanh games     24 May  6 13:20 1-pm-origpatnum.dat
  -rw-r--r--  1 chanh games     24 May  6 13:20 1-pm-patnum.dat      <- Output
  -rw-r--r--  1 chanh games    532 May  6 13:20 1-pm-pattern.dat
  -rw-r--r--  1 chanh games     24 May  6 13:20 1-pm-timing.dat      <- Output

For verification, run

  pmVerify <data_set_number>





Workload and Throughput Calculations (Matlab required)
___________________________________________________________________________
The workload and throughput functions require Matlab. To determine the 
workload for a given data set, run in Matlab

  >> data_set_num = 1;
  >> pmWorkload(data_set_num)

For the corresponding throughput calculation, run

  >> data_set_num = 1;
  >> pmThroughput(data_set_num)



Sample:
___________________________________________________________________________

% make clean
rm -f pm pmVerify

% make
gcc -static -xc -ansi -Wall pm.c -o pm -I../include -lm
gcc -static -xc -ansi -Wall pmVerify.c -o pmVerify -I../include

% matlab

>> pmGenerator(0, 0.1, 10, 40, 0.02, 64, 128)
Pattern Length = 64, Number of Templates = 128
Generating the template library
Distorting pattern number 63 from lib as test pattern
lib data is stored in ./data/0-pm-lib.dat
test pattern data is stored in ./data/0-pm-pattern.dat
original index data is stored in ./data/0-pm-origpatnum.dat

>> quit

% ./pm 0
done.

% ./pmVerify 0
Verification: PASS

********
Note: Inputs are based on the random generator, so result may vary.
********

% matlab

>> pmWorkload 0
ans =
    1202976

>> pmThroughput 0
ans =
    1.6886e+08

